{
	"info": {
		"_postman_id": "e84a305d-982a-400b-8c7f-c898c8f5034e",
		"name": "OEM_v1",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "token",
			"item": [
				{
					"name": "fetch auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1aad9736-be15-45d5-b55d-3a96f31fdaab",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"jwt_access_token\", jsonData.access_token);",
									"",
									" function parseJwt (token,part) {",
									"   var base64Url = token.split('.')[part];",
									"   var words = CryptoJS.enc.Base64.parse(base64Url);",
									"   var jsonPayload = CryptoJS.enc.Utf8.stringify(words);",
									"   return  JSON.parse(jsonPayload);",
									"};",
									"",
									"var jwtInfo ={};",
									"jwtInfo.size = jsonData.access_token.length;",
									"jwtInfo.header = parseJwt(jsonData.access_token,0);",
									"jwtInfo.payload = parseJwt(jsonData.access_token,1);",
									"jwtInfo.signature = jsonData.access_token.split('.')[2];",
									"jwtInfo.expires = ((jwtInfo.payload.exp-Date.now().valueOf()/1000)/60).toFixed(1);",
									"console.log(jwtInfo);",
									"",
									"var template = `",
									"<b>JWT  Size:{{response.size}}Bytes. Expires in {{response.expires}} minutes</b><br>",
									"<b>Header </b>",
									"    <table>",
									"        <tr><th>Property</th><th>Value</th></tr>",
									"        {{#each response.header}}",
									"            <tr><td>{{@key}}</td><td>{{.}}</td></tr>",
									"        {{/each}}",
									"    </table>",
									"<b>Payload</b>",
									"    <table>",
									"        <tr><th>Property</th><th>Value</th></tr>",
									"        {{#each response.payload}}",
									"            <tr><td>{{@key}}</td><td>{{.}}</td></tr>",
									"        {{/each}}",
									"    </table>",
									" <b>Claims</b>",
									"    <table bgcolor=\"#FFFFFF\">",
									"        <tr><th>Claim</th><th>Value</th></tr>",
									"        {{#each response.payload.Claims}}",
									"            <tr>",
									"                {{#each this}}",
									"                    <td>{{.}}</td>       ",
									"                {{/each}}",
									"            </tr>",
									"        {{/each}}",
									"    </table>",
									"  <i>signature:{{response.signature}}</i>",
									"`;",
									"pm.visualizer.set(template, {response: jwtInfo});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"let [header, payload, signature] = jsonData.access_token.split('.');",
									"",
									"function decode(x) {",
									"    let wordArray = CryptoJS.enc.Base64.parse(x);",
									"    let str = CryptoJS.enc.Utf8.stringify(wordArray);",
									"    return JSON.parse(str);",
									"}",
									"",
									"console.log(\"Header: \", decode(header));",
									"console.log(\"Payload: \", decode(payload));",
									"",
									"",
									"",
									"",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"token_type: Bearer\", function () {",
									"pm.expect(jsonData.token_type).to.eql(\"Bearer\");",
									"});",
									"pm.test(\"expires_in: 86400 seconds\", function () {",
									"pm.expect(jsonData.expires_in).to.eql(86400);",
									"});",
									"",
									"const ajv = require('ajv');",
									"const Ajv = ajv();",
									"",
									"pm.test(\"schema validation\", ()=>{",
									"    const schema = {",
									"        type: \"object\",",
									"        properties:{",
									"            \"access_token\":{\"type\":\"string\"},",
									"            \"token_type\":{\"type\":\"string\"},",
									"            \"expires_in\":{\"type\":\"integer\"}",
									"            ",
									"        }",
									"    }",
									"",
									"    const validate = Ajv.compile(schema);",
									"    const res = pm.response.json();",
									"    const isValid = validate(res);",
									"    pm.expect(isValid).to.be.true;",
									"})",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "31a440c5-9097-4a15-bef4-9a51afd46f90",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_id\": \"{{client_id}}\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"audience\": \"{{audience}}\",\n    \"grant_type\": \"{{grant_type}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/api/oauth/token"
					},
					"response": []
				},
				{
					"name": "fetch auth token_wrong client_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1aad9736-be15-45d5-b55d-3a96f31fdaab",
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Invalid credentials\", function () {",
									"    pm.expect(jsonData).to.eql(\"Invalid credentials\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "feb33a92-65af-4cfe-9f73-da17d031ab30",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_id\": \"ahdbjhsbhj£$!0p\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"audience\": \"{{audience}}\",\n    \"grant_type\": \"{{grant_type}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/api/oauth/token"
					},
					"response": []
				},
				{
					"name": "fetch auth token_wrong client secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1aad9736-be15-45d5-b55d-3a96f31fdaab",
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Invalid credentials\", function () {",
									"    pm.expect(jsonData).to.eql(\"Invalid credentials\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a381dd60-89fe-4d52-9085-82120071007a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_id\": \"{{client_id}}\",\n    \"client_secret\": \"hadsjh wjbejhj £@xFHFG90\",\n    \"audience\": \"{{audience}}\",\n    \"grant_type\": \"{{grant_type}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/api/oauth/token"
					},
					"response": []
				},
				{
					"name": "fetch auth token_wrong audience",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1aad9736-be15-45d5-b55d-3a96f31fdaab",
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Invalid credentials\", function () {",
									"    pm.expect(jsonData).to.eql(\"Invalid credentials\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "448b102f-df1f-4a40-a620-bd9a76223954",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_id\": \"{{client_id}}\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"audience\": \"https://www.google.com/\",\n    \"grant_type\": \"{{grant_type}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/api/oauth/token"
					},
					"response": []
				},
				{
					"name": "fetch auth token_wrong grant_type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1aad9736-be15-45d5-b55d-3a96f31fdaab",
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"pm.test(\"Invalid credentials\", function () {",
									"    pm.expect(jsonData).to.eql(\"Invalid credentials\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a5bf0c4c-d89e-48d4-8d68-368b69328e2b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_id\": \"{{client_id}}\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"audience\": \"{{audience}}\",\n    \"grant_type\": \"READ_WRITE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/api/oauth/token"
					},
					"response": []
				}
			],
			"id": "6c7fd769-0345-41e1-97e2-47c9d69b0072",
			"description": "#### Our APIs are protected using JWT access tokens, so the first step is to fetch an auth token using the following details in the link below.\n\n#### [https://docs.introvoke.com/docs/getting-started](https://docs.introvoke.com/docs/getting-started)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "348ed62e-ea1a-4645-914b-e4e6d50e7889",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f7af670c-88dd-427e-9929-89e55aa6b330",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "company",
			"item": [
				{
					"name": "find company by ID",
					"item": [
						{
							"name": "find company by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0128f3c-c41f-41ae-a718-fd4c9591f649",
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//schema validation",
											"const ajv = require('ajv');",
											"const Ajv = ajv();",
											"pm.test(\"schema validation\", ()=>{",
											"    const schema = {",
											"        type: \"object\",",
											"        properties:{",
											"            \"name\":{\"type\":\"string\"},",
											"            \"logo\":{\"type\":\"string\"},",
											"            \"uid\":{\"type\":\"string\"},",
											"            \"eventIds\":{\"type\":\"array\"},",
											"            \"parentCompanyId\":{\"type\":\"null\" || \"string\" },",
											"        }",
											"    }",
											"",
											"    const validate = Ajv.compile(schema);",
											"    const res = pm.response.json();",
											"    const isValid = validate(res);",
											"    pm.expect(isValid).to.be.true;",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8b5aa7eb-211a-4a85-9ace-7536813b5d61",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/company/{{companyId}}"
							},
							"response": []
						},
						{
							"name": "find company by ID_without companyID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0128f3c-c41f-41ae-a718-fd4c9591f649",
										"exec": [
											"pm.test(\"Status code is 404 Company Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7d689774-bc40-48f0-b563-183888d2a9e7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/company/"
							},
							"response": []
						},
						{
							"name": "find company by ID_invalid companyID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0128f3c-c41f-41ae-a718-fd4c9591f649",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"",
											"// let jsonData = pm.response.json();",
											"// pm.test(\"hasError: true\", function () {",
											"// pm.expect(jsonData.hasError).to.eql(true);",
											"// });",
											"",
											"// pm.environment.set('errorMessage', pm.response.json().errorMessage);",
											"",
											"// pm.test(\"errorMessage\", function () {",
											"// pm.expect(jsonData.errorMessage).to.eql(pm.environment.get(\"errorMessage\"));",
											"// });",
											"// pm.environment.unset(\"errorMessage\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "39c36d19-cd31-4926-b48e-170cd1db24dd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/company/{{invalid_companyId}}"
							},
							"response": []
						},
						{
							"name": "find company by ID_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0128f3c-c41f-41ae-a718-fd4c9591f649",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// let jsonData = pm.response.json();",
											"// pm.test(\"Invalid token\", function () {",
											"//     pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"// });",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "057f2368-6469-448f-a248-ba59d469fda8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/company/{{companyId}}"
							},
							"response": []
						},
						{
							"name": "find company by ID_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0128f3c-c41f-41ae-a718-fd4c9591f649",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// let jsonData = pm.response.json();",
											"// pm.test(\"message: No token found in the request\", function () {",
											"//     pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"// });",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7ae873c3-6985-475e-8e57-a0f1ced0a4d4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/company/{{companyId}}"
							},
							"response": []
						}
					],
					"id": "44c393dc-9aed-43ee-bc71-242c171ef3a4",
					"description": "#### Returns a single company.\n\n#### [https://docs.introvoke.com/reference/getcompanybyid](https://docs.introvoke.com/reference/getcompanybyid)"
				},
				{
					"name": "list all companies under a parent company",
					"item": [
						{
							"name": "companies under parent company",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38d56a04-8603-460e-a586-5767e46ac4a2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"parentCompanyId\", function () {",
											"pm.expect(jsonData[0].parentCompanyId).to.eql(pm.environment.get(\"companyId\"));",
											"});",
											"",
											"//schema validation",
											"const ajv = require('ajv');",
											"const Ajv = ajv();",
											"pm.test(\"schema validation\", ()=>{",
											"    const schema = {",
											"        type: \"array\",",
											"        properties:{",
											"            \"name\":{\"type\":\"string\"},",
											"            \"logo\":{\"type\":\"string\"},",
											"            \"uid\":{\"type\":\"string\"},",
											"            \"eventIds\":{\"type\":\"array\"},",
											"            \"metadata\":{\"type\":\"null\" || \"object\"},",
											"            \"parentCompanyId\":{\"type\":\"null\" || \"string\" },",
											"        }",
											"    }",
											"",
											"    const validate = Ajv.compile(schema);",
											"    const res = pm.response.json();",
											"    const isValid = validate(res);",
											"    pm.expect(isValid).to.be.true;",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1636fbc8-ba38-421a-b6b8-0de0f36072d7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/company/{{companyId}}/list"
							},
							"response": []
						},
						{
							"name": "companies under parent company_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38d56a04-8603-460e-a586-5767e46ac4a2",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// let jsonData = pm.response.json();",
											"// pm.test(\"message: No token found in the request\", function () {",
											"//     pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3c16373a-a228-470c-ade2-730034092380",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/company/{{companyId}}/list"
							},
							"response": []
						},
						{
							"name": "companies under parent company_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38d56a04-8603-460e-a586-5767e46ac4a2",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// let jsonData = pm.response.json();",
											"// pm.test(\"message: Invalid token\", function () {",
											"//     pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d37f500e-5ae8-47d7-ace5-aacdea180995",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/company/{{companyId}}/list"
							},
							"response": []
						},
						{
							"name": "companies under parent company_invalid input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38d56a04-8603-460e-a586-5767e46ac4a2",
										"exec": [
											"",
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"",
											"// let jsonData = pm.response.json();",
											"// pm.test(\"hasError: true\", function () {",
											"// pm.expect(jsonData.hasError).to.eql(true);",
											"// });",
											"",
											"// pm.environment.set('errorMessage', pm.response.json().errorMessage);",
											"",
											"// pm.test(\"errorMessage\", function () {",
											"// pm.expect(jsonData.errorMessage).to.eql(pm.environment.get(\"errorMessage\"));",
											"// });",
											"// pm.environment.unset(\"errorMessage\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bc751507-7dd9-4e83-a545-ac0375d7eb49",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/company/{{invalid_companyId}}/list"
							},
							"response": []
						}
					],
					"id": "87825126-e587-4dec-a587-5c64d7ab2bb8",
					"description": "#### List all companies under a parent company\n\n#### [https://docs.introvoke.com/reference/listchildcompanies](https://docs.introvoke.com/reference/listchildcompanies)"
				},
				{
					"name": "list all events under a parent company",
					"item": [
						{
							"name": "events under parent company",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38d56a04-8603-460e-a586-5767e46ac4a2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//schema validation",
											"const ajv = require('ajv');",
											"const Ajv = ajv();",
											"pm.test(\"schema validation\", ()=>{",
											"    const schema = {",
											"        type: \"array\",",
											"        properties:{",
											"            \"uid\":{\"type\":\"string\"},",
											"            \"name\":{\"type\":\"string\"},",
											"            \"picture\":{\"type\":\"string\"},",
											"            \"startDate\":{\"type\":\"string\"},",
											"            \"endDate\":{\"type\":\"string\"},",
											"            \"timezone\":{\"type\":\"string\"},",
											"            \"networkingHub\":{\"type\":\"object\",",
											"                properties:{",
											"                        \"id\": {\"type\":\"string\"},",
											"                        \"name\": {\"type\":\"string\"}",
											"                    },",
											"            },",
											"            \"company\":{\"type\":\"object\",",
											"                properties:{",
											"                        \"id\": {\"type\":\"string\"},",
											"                        \"name\": {\"type\":\"string\"},",
											"                        \"logo\": {\"type\":\"string\"}",
											"                    },",
											"            },",
											"            \"isEventLive\":{\"type\":\"boolean\"},",
											"            \"isReplayEnabled\":{\"type\":\"boolean\"}",
											"                    ",
											"        }",
											"    }",
											"",
											"    const validate = Ajv.compile(schema);",
											"    const res = pm.response.json();",
											"    const isValid = validate(res);",
											"    pm.expect(isValid).to.be.true;",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5d9388f9-ed7d-48e6-bef1-73e8b114c9f1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/company/{{companyId}}/events"
							},
							"response": []
						},
						{
							"name": "events under parent company_invalid companyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38d56a04-8603-460e-a586-5767e46ac4a2",
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// let jsonData = pm.response.json();",
											"// pm.test(\"Company not found\", function () {",
											"// pm.expect(jsonData).to.eql(\"Company not found\");",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3395f6b6-277f-47be-9020-656003d45a61",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/company/{{invalid_companyId}}/events"
							},
							"response": []
						},
						{
							"name": "events under parent company_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38d56a04-8603-460e-a586-5767e46ac4a2",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// let jsonData = pm.response.json();",
											"// pm.test(\"message: No token found in the request\", function () {",
											"// pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d9e7db91-a127-42cf-98f2-7a3211742dc9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/company/{{companyId}}/events"
							},
							"response": []
						},
						{
							"name": "events under parent company_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38d56a04-8603-460e-a586-5767e46ac4a2",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// let jsonData = pm.response.json();",
											"// pm.test(\"message: Invalid token\", function () {",
											"// pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "de3d181c-5a6e-4053-a240-2d523e74df64",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/company/{{companyId}}/events"
							},
							"response": []
						}
					],
					"id": "79838836-fa7b-4c1f-b890-d99771af64a7",
					"description": "#### List all events under a parent company\n\n#### [https://docs.introvoke.com/reference/listcompanyevents](https://docs.introvoke.com/reference/listcompanyevents)"
				},
				{
					"name": "create company under parent company",
					"item": [
						{
							"name": "create child company",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e8407c2-8b1a-473c-80d9-8130b48a73fa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.environment.set('childcompany_id', pm.response.json().uid);",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"name\", function () {",
											"pm.expect(jsonData.name).to.eql(pm.environment.get(\"childCompany_name\"));",
											"});",
											"pm.test(\"childcompany_id: uid\", function () {",
											"pm.expect(jsonData.uid).to.eql(pm.environment.get(\"childcompany_id\"));",
											"});",
											"pm.test(\"parentCompanyId\", function () {",
											"pm.expect(jsonData.parentCompanyId).to.eql(pm.environment.get(\"companyId\"));",
											"});",
											"",
											"",
											"//schema vaildation",
											"const ajv = require('ajv');",
											"const Ajv = ajv();",
											"pm.test(\"schema validation\", ()=>{",
											"    const schema = {",
											"        type: \"object\",",
											"        properties:{",
											"            \"name\":{\"type\":\"string\"},",
											"            \"logo\":{\"type\":\"string\"},",
											"            \"uid\":{\"type\":\"string\"},",
											"            \"eventIds\":{\"type\":\"array\"},",
											"            \"metadata\":{\"type\": \"object\"},",
											"            \"parentCompanyId\":{\"type\":\"string\"},",
											"            ",
											"        }}",
											"    const validate = Ajv.compile(schema);",
											"    const res = pm.response.json();",
											"    const isValid = validate(res);",
											"    pm.expect(isValid).to.be.true;",
											"})",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1502c4c2-88a2-4d27-ac7a-2fa2c09c52b4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{childCompany_name}}\",\n    \"logo\": \"\",\n    \"metadata\": {\n        \"companyMetaData\": {\n            \"colour\": \"red\",\n            \"temperature\": \"100\",\n            \"region\": \"US\"\n            \n        }\n    \n    }\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/company/{{companyId}}/create"
							},
							"response": []
						},
						{
							"name": "create child company_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e8407c2-8b1a-473c-80d9-8130b48a73fa",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// let jsonData = pm.response.json();",
											"// pm.test(\"message: No token found in the request\", function () {",
											"//     pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "16032dfb-6b95-49a5-844d-7c6bc988d446",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{childCompany_name}}\",\n    \"logo\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/company/{{companyId}}/create"
							},
							"response": []
						},
						{
							"name": "create child company_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e8407c2-8b1a-473c-80d9-8130b48a73fa",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// let jsonData = pm.response.json();",
											"// pm.test(\"message: Invalid token\", function () {",
											"//     pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f61337ef-df3a-4d52-aedd-322b1ea89a9b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{childCompany_name}}\",\n    \"logo\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/company/{{companyId}}/create"
							},
							"response": []
						},
						{
							"name": "create child company_without name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e8407c2-8b1a-473c-80d9-8130b48a73fa",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message : Request body has validation errors.\", function () {",
											"pm.expect(jsonData.message).to.eql(\"Request body has validation errors.\");",
											"});",
											"pm.test(\"validationErrors\", function () {",
											"pm.expect(jsonData.validationErrors[0]).to.eql(\"/name - must NOT have fewer than 3 characters\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "95a8d6a5-20b9-479f-beac-32e2c7d54a74",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\",\n    \"logo\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/company/{{companyId}}/create"
							},
							"response": []
						},
						{
							"name": "create child company_blank body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e8407c2-8b1a-473c-80d9-8130b48a73fa",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message : Request body has validation errors.\", function () {",
											"pm.expect(jsonData.message).to.eql(\"Request body has validation errors.\");",
											"});",
											"pm.test(\"validationErrors\", function () {",
											"pm.expect(jsonData.validationErrors[0]).to.eql(\" - must have required property 'name'\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "90625138-2baa-4f37-af41-e11d12058e11",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/company/{{companyId}}/create"
							},
							"response": []
						}
					],
					"id": "9e7e1c1f-25d3-42c8-889a-6ebed1086e3b",
					"description": "#### Create a new company under a parent company\n\n#### [https://docs.introvoke.com/reference/addcompanytoparent](https://docs.introvoke.com/reference/addcompanytoparent)"
				},
				{
					"name": "update company",
					"item": [
						{
							"name": "update company with json data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "529cd793-3072-4f28-89e0-8ef37a87b917",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"name\", function () {",
											"pm.expect(jsonData.name).to.eql(\"Testing name change\");",
											"});",
											"pm.test(\"uid\", function () {",
											"pm.expect(jsonData.uid).to.eql(pm.environment.get(\"childcompany_id\"));",
											"});",
											"pm.test(\"parentCompanyId\", function () {",
											"pm.expect(jsonData.parentCompanyId).to.eql(pm.environment.get(\"companyId\"));",
											"});",
											"",
											"",
											"//schema validation",
											"const ajv = require('ajv');",
											"const Ajv = ajv();",
											"pm.test(\"schema validation\", ()=>{",
											"    const schema = {",
											"        type: \"object\",",
											"        properties:{",
											"            \"name\":{\"type\":\"string\"},",
											"            \"logo\":{\"type\":\"string\"},",
											"            \"uid\":{\"type\":\"string\"},",
											"            \"eventIds\":{\"type\":\"array\"},",
											"            \"parentCompanyId\":{\"type\":\"string\"},",
											"            \"metadata\":{\"type\":\"object\",",
											"                properties:{",
											"                        ",
											"                        \"companyMetaData\":{\"type\":\"object\",",
											"                            properties:{",
											"                              \"colour\": {\"type\":\"string\"},",
											"                              \"temperature\": {\"type\":\"string\"},",
											"                              \"region\": {\"type\":\"string\"}",
											"                        ",
											"                        ",
											"                        ",
											"                    },",
											"            },",
											"                        ",
											"                        ",
											"                        ",
											"                    },",
											"            },",
											"            ",
											"",
											"                  ",
											"            ",
											"        }",
											"    }",
											"",
											"    const validate = Ajv.compile(schema);",
											"    const res = pm.response.json();",
											"    const isValid = validate(res);",
											"    pm.expect(isValid).to.be.true;",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e23ae02a-ec3b-4154-9029-952d68b52afb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Testing name change\",\n    \"logo\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/company/{{childcompany_id}}"
							},
							"response": []
						},
						{
							"name": "update company with json data_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "529cd793-3072-4f28-89e0-8ef37a87b917",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// let jsonData = pm.response.json();",
											"// pm.test(\"message: No token found in the request\", function () {",
											"//     pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e6607a69-ecb5-480e-9000-e11d991a7037",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Testing name change\",\n    \"logo\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/company/{{childcompany_id}}"
							},
							"response": []
						},
						{
							"name": "update company with json data_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "529cd793-3072-4f28-89e0-8ef37a87b917",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// let jsonData = pm.response.json();",
											"// pm.test(\"message : Invalid token\", function () {",
											"//     pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "660b0dc5-0569-41db-958d-2bc06a39e335",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Testing name change\",\n    \"logo\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/company/{{childcompany_id}}"
							},
							"response": []
						},
						{
							"name": "update company with json data_blank values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1445e291-f0cd-4359-bb72-8164c52b8985",
										"exec": [
											"pm.test(\"Status code is 400 Bad request\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "73a36957-a24a-47be-a66d-e35955a42526",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\",\n    \"logo\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/company/{{childcompany_id}}"
							},
							"response": []
						}
					],
					"id": "6ac874a4-fb21-4a20-92c6-c3bceef55a0f",
					"description": "#### Update metadata for the company\n\n#### [https://docs.introvoke.com/reference/updatecompanymetadata](https://docs.introvoke.com/reference/updatecompanymetadata)"
				}
			],
			"id": "8a3108c9-c83b-44d2-86b7-34ce0db727e7"
		},
		{
			"name": "event",
			"item": [
				{
					"name": "create new event",
					"item": [
						{
							"name": "create new event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0c5faae-107b-480e-8c54-b3881d8d82bd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set('eventId', pm.response.json().uid);",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"companyUid\", function () {",
											"pm.expect(jsonData.companyUid).to.eql(pm.environment.get(\"companyId\"));",
											"});",
											"",
											"pm.test(\"startDate\", function () {",
											"pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"event_startDate\"));",
											"});",
											"",
											"pm.test(\"endDate\", function () {",
											"pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"event_endDate\"));",
											"});",
											"",
											"pm.test(\"name\", function () {",
											"pm.expect(jsonData.name).to.eql(pm.environment.get(\"event_name\"));",
											"});",
											"",
											"pm.test(\"timezone\", function () {",
											"pm.expect(jsonData.timezone).to.eql(pm.environment.get(\"event_timezone\"));",
											"});",
											"",
											"pm.test(\"type\", function () {",
											"pm.expect(jsonData.type).to.eql(pm.environment.get(\"event_type\"));",
											"});",
											"",
											"",
											"",
											"//schema vaildation",
											"const ajv = require('ajv');",
											"const Ajv = ajv();",
											"pm.test(\"schema validation\", ()=>{",
											"    const schema = {",
											"        type: \"object\",",
											"        properties:{",
											"            \"uid\":{\"type\":\"string\"},",
											"            \"companyUid\":{\"type\":\"string\"},",
											"            \"name\":{\"type\":\"string\"},",
											"            \"startDate\":{\"type\":\"string\"},",
											"            \"endDate\":{\"type\":\"string\"},",
											"            \"timezone\":{\"type\":\"string\"},",
											"            \"type\":{\"type\":\"string\"},",
											"            \"eventInfo\":{\"type\":\"object\",",
											"                properties:{",
											"                    \"privateEventInfo\":{\"type\": \"object\",",
											"                    properties:{",
											"                        \"attendeePasscode\": {\"type\":\"string\"},",
											"                        \"presenterPasscode\": {\"type\":\"string\"},",
											"                        \"hostPasscode\": {\"type\":\"string\"},",
											"                        \"rtmpKey\": {\"type\":\"string\"},",
											"                        \"rtmpUrl\": {\"type\":\"string\"}",
											"",
											"                    }",
											"                }",
											"            },",
											"            ",
											"        }",
											"    }",
											"    }",
											"",
											"    const validate = Ajv.compile(schema);",
											"    const res = pm.response.json();",
											"    const isValid = validate(res);",
											"    pm.expect(isValid).to.be.true;",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d8982767-10d4-4d83-9366-312a77341573",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"companyId\": \"{{companyId}}\",\n    \"name\": \"{{event_name}}\",\n    \"startDate\": \"{{event_startDate}}\",\n    \"endDate\": \"{{event_endDate}}\",\n    \"timezone\": \"{{event_timezone}}\",\n    \"type\": \"{{event_type}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/create"
							},
							"response": []
						},
						{
							"name": "create new event_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0c5faae-107b-480e-8c54-b3881d8d82bd",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "58302d03-0a40-443d-8abc-1a74a725a211",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"companyId\": \"{{companyId}}\",\n    \"name\": \"{{event_name}}\",\n    \"startDate\": \"{{event_startDate}}\",\n    \"endDate\": \"{{event_endDate}}\",\n    \"timezone\": \"{{event_timezone}}\",\n    \"type\": \"{{event_type}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/create"
							},
							"response": []
						},
						{
							"name": "create new event_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0c5faae-107b-480e-8c54-b3881d8d82bd",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "63daf3d5-c1d8-4edf-9750-fe5f7712aa0e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"companyId\": \"{{companyId}}\",\n    \"name\": \"{{event_name}}\",\n    \"startDate\": \"{{event_startDate}}\",\n    \"endDate\": \"{{event_endDate}}\",\n    \"timezone\": \"{{event_timezone}}\",\n    \"type\": \"{{event_type}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/create"
							},
							"response": []
						},
						{
							"name": "create new event_invalid companyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0c5faae-107b-480e-8c54-b3881d8d82bd",
										"exec": [
											"pm.test(\"Status code is 400 Unauthorized\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"Company not found\", function () {",
											"    pm.expect(jsonData).to.eql(\"Company not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "29f3dd83-7b07-4300-abb7-6366d3acb6cb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"companyId\": \"{{invalid_companyId}}\",\n    \"name\": \"{{event_name}}\",\n    \"startDate\": \"{{event_startDate}}\",\n    \"endDate\": \"{{event_endDate}}\",\n    \"timezone\": \"{{event_timezone}}\",\n    \"type\": \"{{event_type}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/create"
							},
							"response": []
						}
					],
					"id": "69a27000-ac00-441d-8a6a-6c390f376a68",
					"description": "#### Create a new event\n\n#### [https://docs.introvoke.com/reference/addevent](https://docs.introvoke.com/reference/addevent)"
				},
				{
					"name": "find event",
					"item": [
						{
							"name": "find event by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab2ee5b6-45c3-4655-a165-7c758f9b3237",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"uid:eventId\", function () {",
											"pm.expect(jsonData.uid).to.eql(pm.environment.get(\"eventId\"));",
											"});",
											"pm.test(\"companyUid\", function () {",
											"pm.expect(jsonData.companyUid).to.eql(pm.environment.get(\"companyId\"));",
											"});",
											"pm.test(\"name\", function () {",
											"pm.expect(jsonData.name).to.eql(pm.environment.get(\"event_name\"));",
											"});",
											"pm.test(\"picture\", function () {",
											"pm.expect(jsonData.picture).to.eql(null);",
											"});",
											"pm.test(\"startDate\", function () {",
											"pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"event_startDate\"));",
											"});",
											"pm.test(\"endDate\", function () {",
											"pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"event_endDate\"));",
											"});",
											"pm.test(\"timezone\", function () {",
											"pm.expect(jsonData.timezone).to.eql(pm.environment.get(\"event_timezone\"));",
											"});",
											"pm.test(\"type\", function () {",
											"pm.expect(jsonData.type).to.eql(pm.environment.get(\"event_type\"));",
											"});",
											"",
											"//schema vaildation",
											"const ajv = require('ajv');",
											"const Ajv = ajv();",
											"pm.test(\"schema validation\", ()=>{",
											"    const schema = {",
											"        type: \"object\",",
											"        properties:{",
											"            \"uid\":{\"type\":\"string\"},",
											"            \"companyUid\":{\"type\":\"string\"},",
											"            \"name\":{\"type\":\"string\"},",
											"            \"picture\":{\"type\":\"null\" || \"string\"},",
											"            \"startDate\":{\"type\":\"string\"},",
											"            \"endDate\":{\"type\":\"string\"},",
											"            \"timezone\":{\"type\":\"string\"},",
											"            \"type\":{\"type\":\"string\"},",
											"            \"presenters\":{\"type\":\"null\" || \"array\"},",
											"            \"organizers\":{\"type\":\"null\" || \"array\"},",
											"            \"networkingHub\":{\"type\":\"null\" || \"string\"},",
											"            \"eventInfo\":{\"type\":\"object\",",
											"                properties:{",
											"                    \"privateEventInfo\":{\"type\": \"object\",",
											"                    properties:{",
											"                        \"attendeePasscode\": {\"type\":\"string\"},",
											"                        \"presenterPasscode\": {\"type\":\"string\"},",
											"                        \"hostPasscode\": {\"type\":\"string\"},",
											"                        \"rtmpKey\": {\"type\":\"string\"},",
											"                        \"rtmpUrl\": {\"type\":\"string\"}",
											"",
											"                    }",
											"                }",
											"                ",
											"            },",
											"            \"autoSelectLatestReplay\":{\"type\":\"null\" || \"boolean\"},",
											"            \"isAttendeeRegistrationModeEnabled\":{\"type\":\"null\" || \"boolean\"},",
											"            \"isPresenterRegistrationModeEnabled\":{\"type\":\"null\" || \"boolean\"},",
											"            \"isRegistrationModeEnabled\":{\"type\":\"null\" || \"boolean\"},",
											"            \"registration\":{\"type\":\"null\" || \"boolean\"},",
											"            \"showInDemo\":{\"type\":\"null\" || \"boolean\"},",
											"            \"disableEventRecording\":{\"type\":\"null\" || \"boolean\"}",
											"            ",
											"        }",
											"        ",
											"    }",
											"    ",
											"    }",
											"",
											"    const validate = Ajv.compile(schema);",
											"    const res = pm.response.json();",
											"    const isValid = validate(res);",
											"    pm.expect(isValid).to.be.true;",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e71d0c42-8823-46ca-a648-aa09cb5cbc38",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}"
							},
							"response": []
						},
						{
							"name": "find event by ID_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a1b4b6a-333b-4315-b23e-37e727439005",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d104106c-c5d4-404e-a57c-aee852d0033f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}"
							},
							"response": []
						},
						{
							"name": "find event by ID_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19c3f08d-dbcf-4f0a-baad-f65c69cf412b",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e13e0f70-5d01-4a7f-819e-da0c5e025d2f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}"
							},
							"response": []
						},
						{
							"name": "find event by ID_invalid eventId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d01d295-f5a1-4f36-b31d-3160c64e232e",
										"exec": [
											"",
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"hasError: true\", function () {",
											"pm.expect(jsonData.hasError).to.eql(true);",
											"});",
											"",
											"pm.environment.set('errorMessage', pm.response.json().errorMessage);",
											"",
											"pm.test(\"errorMessage\", function () {",
											"pm.expect(jsonData.errorMessage).to.eql(pm.environment.get(\"errorMessage\"));",
											"});",
											"pm.environment.unset(\"errorMessage\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "08532f72-268c-491b-a1df-63d9cdb8d6ed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/event/{{invalid_eventId}}"
							},
							"response": []
						},
						{
							"name": "find event by ID_deleted eventId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d47d19d0-4466-40b0-8b58-6e597a005e27",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"hasError: true\", function () {",
											"pm.expect(jsonData.hasError).to.eql(true);",
											"});",
											"",
											"pm.environment.set('errorMessage', pm.response.json().errorMessage);",
											"",
											"pm.test(\"errorMessage\", function () {",
											"pm.expect(jsonData.errorMessage).to.eql(pm.environment.get(\"errorMessage\"));",
											"});",
											"pm.environment.unset(\"errorMessage\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "86f292f1-9ba2-4a07-9dd6-40008e76c72f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": "{{url}}/api/v1/event/{{deleted_eventId}}"
							},
							"response": []
						}
					],
					"id": "1a729dc7-a837-4ada-9701-9d0382c0e123",
					"description": "#### Find event by ID\n\n#### [https://docs.introvoke.com/reference/geteventbyid](https://docs.introvoke.com/reference/geteventbyid)"
				},
				{
					"name": "return embed code",
					"item": [
						{
							"name": "return embedCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c294f11-b35f-4211-ad98-8386c2eac35f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set('embedCode', pm.response.json());",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"embedCode\", function () {",
											"pm.expect(jsonData).to.eql(pm.environment.get(\"embedCode\"));",
											"});",
											"",
											"pm.environment.unset(\"embedCode\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "35e4463a-6d0d-4e73-921e-d365f04f4a37",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"test1234\",\n    \"userDisplayName\": \"Test\",\n    \"userEmail\": \"testksbdj326724\",\n    \"userAvatar\": \"kdciiwebrbu\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/embedCode"
							},
							"response": []
						},
						{
							"name": "return embedCode without userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c294f11-b35f-4211-ad98-8386c2eac35f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"Invalid parameters supplied\", function () {",
											"pm.expect(jsonData).to.eql(\"Invalid parameters supplied\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0f629112-3351-4667-aae5-b3b2765a2c38",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"\",\n    \"userDisplayName\": \"Test\",\n    \"userEmail\": \"testksbdj326724\",\n    \"userAvatar\": \"kdciiwebrbu\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/embedCode"
							},
							"response": []
						},
						{
							"name": "return embedCode without userDisplayName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c294f11-b35f-4211-ad98-8386c2eac35f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"Invalid parameters supplied\", function () {",
											"pm.expect(jsonData).to.eql(\"Invalid parameters supplied\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4ccb053d-ecd4-427d-a13e-8ebd6b094a17",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"test1234\",\n    \"userDisplayName\": \"\",\n    \"userEmail\": \"testksbdj326724\",\n    \"userAvatar\": \"kdciiwebrbu\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/embedCode"
							},
							"response": []
						},
						{
							"name": "return embedCode without userEmail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c294f11-b35f-4211-ad98-8386c2eac35f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"Invalid parameters supplied\", function () {",
											"pm.expect(jsonData).to.eql(\"Invalid parameters supplied\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "eafff6bc-a5be-4e73-ba61-83f0e7bd6ca1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"test1234\",\n    \"userDisplayName\": \"Test\",\n    \"userEmail\": \"\",\n    \"userAvatar\": \"hjvuju\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/embedCode"
							},
							"response": []
						},
						{
							"name": "return embedCode without userAvatar",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c294f11-b35f-4211-ad98-8386c2eac35f",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"Invalid parameters supplied\", function () {",
											"pm.expect(jsonData).to.eql(\"Invalid parameters supplied\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c6a342bb-9486-42dc-a6d0-e4d15bf64b21",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"test1234\",\n    \"userDisplayName\": \"Test\",\n    \"userEmail\": \"gdsgesr\",\n    \"userAvatar\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/embedCode"
							},
							"response": []
						},
						{
							"name": "return embedCode_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55d53db2-0bb0-49b8-8aa8-2f1bb39279a3",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "918e4733-6875-4edd-ab27-6aa968d62b76",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/embedCode"
							},
							"response": []
						},
						{
							"name": "return embedCode_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55d53db2-0bb0-49b8-8aa8-2f1bb39279a3",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "04819582-e841-4316-be60-01b3384fa196",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/embedCode"
							},
							"response": []
						},
						{
							"name": "return embedCode_invalid eventId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55d53db2-0bb0-49b8-8aa8-2f1bb39279a3",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"hasError: true\", function () {",
											"pm.expect(jsonData.hasError).to.eql(true);",
											"});",
											"",
											"",
											"pm.environment.set('errorMessage', pm.response.json().errorMessage);",
											"",
											"pm.test(\"errorMessage\", function () {",
											"pm.expect(jsonData.errorMessage).to.eql(pm.environment.get(\"errorMessage\"));",
											"});",
											"pm.environment.unset(\"errorMessage\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ba64e5cd-fac5-4dd9-a434-879427049ab4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{invalid_eventId}}/embedCode"
							},
							"response": []
						}
					],
					"id": "b31961f0-62ff-42b9-a25c-341db962af16",
					"description": "#### Return the embed code for the event component\n\n#### [https://docs.introvoke.com/reference/getembedeventbyid](https://docs.introvoke.com/reference/getembedeventbyid)"
				},
				{
					"name": "register user",
					"item": [
						{
							"name": "register user for the event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4794af9a-4134-4bd8-b5bc-65c07481520a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"email\", function () {",
											"pm.expect(jsonData.email).to.eql(pm.environment.get(\"user_email\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2e8551c5-0f7f-442d-8bab-7af9ecca779c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{user_name}}\",\n    \"email\": \"{{user_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/registrant"
							},
							"response": []
						},
						{
							"name": "register user for the event_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4794af9a-4134-4bd8-b5bc-65c07481520a",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2aad7d18-f71d-41bd-86fd-949394151005",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{user_name}}\",\n    \"email\": \"{{user_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/registrant"
							},
							"response": []
						},
						{
							"name": "register user for the event_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4794af9a-4134-4bd8-b5bc-65c07481520a",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7d13a59c-afdf-41b8-b53e-41738e60b6fc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{user_name}}\",\n    \"email\": \"{{user_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/registrant"
							},
							"response": []
						},
						{
							"name": "register user for the event_without email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4794af9a-4134-4bd8-b5bc-65c07481520a",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"Invalid parameters supplied\", function () {",
											"pm.expect(jsonData).to.eql(\"Invalid parameters supplied\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6868d82d-0424-47df-9549-5f1f6a865fc7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{user_name}}\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/registrant"
							},
							"response": []
						},
						{
							"name": "register user for the event_without name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4794af9a-4134-4bd8-b5bc-65c07481520a",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"Invalid parameters supplied\", function () {",
											"pm.expect(jsonData).to.eql(\"Invalid parameters supplied\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d462911d-f355-4db7-914c-ebdeba26c15d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n    \"email\": \"{{user_email}}\"\n\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/registrant"
							},
							"response": []
						}
					],
					"id": "caa7f9b2-78df-4715-9d86-2ec910bc45c7",
					"description": "#### Register a user for the event. (Adds a new registered user to the event.)\n\n#### [https://docs.introvoke.com/reference/post_event-eventid-registrant](https://docs.introvoke.com/reference/post_event-eventid-registrant)"
				},
				{
					"name": "return list of registered users",
					"item": [
						{
							"name": "return all users list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6565774a-31eb-4c13-b111-05409e6f07cd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"name\", function () {",
											"pm.expect(jsonData[0].name).to.eql(pm.environment.get(\"user_name\"));",
											"});",
											"pm.test(\"email\", function () {",
											"pm.expect(jsonData[0].email).to.eql(pm.environment.get(\"user_email\"));",
											"});",
											"",
											"pm.environment.set(\"join_url\", jsonData[0].join_url)",
											"",
											"pm.test(\"join_url\", function () {",
											"pm.expect(jsonData[0].join_url).to.eql(pm.environment.get(\"join_url\"));",
											"});",
											"",
											"",
											"",
											"//schema vaildation",
											"const ajv = require('ajv');",
											"const Ajv = ajv();",
											"pm.test(\"schema validation\", ()=>{",
											"    const schema = {",
											"        type: \"array\",",
											"        properties:{",
											"            \"name\":{\"type\":\"string\"},",
											"            \"email\":{\"type\":\"string\"},",
											"            \"join_url\":{\"type\":\"string\"},",
											"            \"metadata\":{\"type\":\"object\"},     ",
											"    }",
											"    }",
											"",
											"    const validate = Ajv.compile(schema);",
											"    const res = pm.response.json();",
											"    const isValid = validate(res);",
											"    pm.expect(isValid).to.be.true;",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1d1df804-b5ac-4a35-91b1-0480c85aa497",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}/registrants"
							},
							"response": []
						},
						{
							"name": "return all users list_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6565774a-31eb-4c13-b111-05409e6f07cd",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f09803ee-fc1e-4ab7-8e17-7a6047c43664",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}/registrants"
							},
							"response": []
						},
						{
							"name": "return all users list_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6565774a-31eb-4c13-b111-05409e6f07cd",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2087710d-96ee-4e07-8143-c1e4ec9f4d57",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}/registrants"
							},
							"response": []
						},
						{
							"name": "return all users list_invalid eventId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6565774a-31eb-4c13-b111-05409e6f07cd",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"hasError: true\", function () {",
											"pm.expect(jsonData.hasError).to.eql(true);",
											"});",
											"",
											"pm.environment.set('errorMessage', pm.response.json().errorMessage);",
											"",
											"pm.test(\"errorMessage\", function () {",
											"pm.expect(jsonData.errorMessage).to.eql(pm.environment.get(\"errorMessage\"));",
											"});",
											"pm.environment.unset(\"errorMessage\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6365c2a4-2ea0-4e05-a686-e4df797f963f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/event/{{invalid_eventId}}/registrants"
							},
							"response": []
						}
					],
					"id": "b3e939cc-dfbe-46c3-9a7f-0f588e20f6cb",
					"description": "#### Return a list of all registered users. (Returns an array of registrants for the event.)\n\n#### [https://docs.introvoke.com/reference/get_event-eventid-registrants](https://docs.introvoke.com/reference/get_event-eventid-registrants)"
				},
				{
					"name": "add presenter id to event",
					"item": [
						{
							"name": "add presenter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1106b9a7-65a6-432f-ab03-4f0aedc6085c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"presenter id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.eql(pm.environment.get(\"presenter_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d61801d5-1b84-4cfd-b53a-3d646302382d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"presenter\": \"{{presenter_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/presenter"
							},
							"response": []
						},
						{
							"name": "add presenter_without presenterId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1106b9a7-65a6-432f-ab03-4f0aedc6085c",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(\"Invalid request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "49f48b18-a74f-442f-8af6-310884eea66b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"presenter\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/presenter"
							},
							"response": []
						},
						{
							"name": "add presenter_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1106b9a7-65a6-432f-ab03-4f0aedc6085c",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"message: No token found in the request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bdda8fb0-cf3c-4b28-ae0d-7e29bbe24798",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"presenter\": \"abc@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/presenter"
							},
							"response": []
						},
						{
							"name": "add presenter_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1106b9a7-65a6-432f-ab03-4f0aedc6085c",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"message: Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5bdd4b05-1c35-4a06-8a2b-1c8b9e129354",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"presenter\": \"abc@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/presenter"
							},
							"response": []
						}
					],
					"id": "a6bc3dff-659c-45cc-af45-eef8d4edc93b",
					"description": "#### Add a presenter id to the event. (Returns the updated list of presenters.)\n\n#### [https://docs.introvoke.com/reference/putpresenterbyid](https://docs.introvoke.com/reference/putpresenterbyid)"
				},
				{
					"name": "add organizer id to event",
					"item": [
						{
							"name": "add organizer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15652826-1eb6-4d4b-bfbf-a520111c488f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"organizer id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0]).to.eql(pm.environment.get(\"organizer_id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6e30e5f2-69b6-4dac-a219-5dae2aa9f199",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"organizer\": \"{{organizer_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/organizer"
							},
							"response": []
						},
						{
							"name": "add organizer_without organizer id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f861d835-a6c9-4d12-a478-dc68da9c1d66",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Invalid request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(\"Invalid request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "32c54b7b-f4e8-4a64-8aa3-49e376d75ee6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"organizer\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/organizer"
							},
							"response": []
						},
						{
							"name": "add organizer_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f861d835-a6c9-4d12-a478-dc68da9c1d66",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"message: No token found in the request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6ff29a7a-baa5-448b-b0dd-ba270df108d4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"organizer\": \"abcd@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/organizer"
							},
							"response": []
						},
						{
							"name": "add organizer_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f861d835-a6c9-4d12-a478-dc68da9c1d66",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"message: Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ce7699b1-e394-43ec-a7ba-92816ba2f5ed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"organizer\": \"abcd@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/organizer"
							},
							"response": []
						}
					],
					"id": "5d7e7af6-36e6-41ff-b5bd-9c66f86d26da",
					"description": "#### Add an organizer id to the event. (Returns the updated list of organizers.)\n\n#### [https://docs.introvoke.com/reference/puthostbyid](https://docs.introvoke.com/reference/puthostbyid)"
				},
				{
					"name": "delete presenter id",
					"item": [
						{
							"name": "delete presenterId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b07c5ef0-ecb6-42cb-bd4b-c18b5b43e5f7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f4fe902f-8f0a-4b17-be25-64e1f4170d56",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}/presenter/{{presenter_id}}"
							},
							"response": []
						},
						{
							"name": "delete presenterId twice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b07c5ef0-ecb6-42cb-bd4b-c18b5b43e5f7",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Id not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(\"Id not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "009920e3-87c4-444d-abc9-22f4e93bb4d8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}/presenter/{{presenter_id}}"
							},
							"response": []
						},
						{
							"name": "delete presenterId_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b07c5ef0-ecb6-42cb-bd4b-c18b5b43e5f7",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"message: No token found in the request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "05197042-e1d2-4283-a2eb-9354401192dd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}/presenter/{{presenter_id}}"
							},
							"response": []
						},
						{
							"name": "delete presenterId_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b07c5ef0-ecb6-42cb-bd4b-c18b5b43e5f7",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"message: Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "927b6cf4-b156-472f-a28b-b1a87a86f3ec",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}/presenter/{{presenter_id}}"
							},
							"response": []
						},
						{
							"name": "delete presenterId_invalid event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b07c5ef0-ecb6-42cb-bd4b-c18b5b43e5f7",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Event not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(\"Event not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "699bb878-719c-4be4-b155-12260a965e48",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{url}}/api/v1/event/{{invalid_eventId}}/presenter/{{presenter_id}}"
							},
							"response": []
						}
					],
					"id": "5548848e-bf64-4bb6-89da-9fb1ec715dc4",
					"description": "#### Delete a presenter id from the event.\n\n#### [https://docs.introvoke.com/reference/deletepresenterbyid](https://docs.introvoke.com/reference/deletepresenterbyid)"
				},
				{
					"name": "delete organizer id",
					"item": [
						{
							"name": "delete organizerId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eaa7a00b-8766-4619-a582-3b635d3b9beb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ec6f3975-b0f9-47f5-a7e6-b10dc9009042",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}/organizer/{{organizer_id}}"
							},
							"response": []
						},
						{
							"name": "delete organizerId twice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b07c5ef0-ecb6-42cb-bd4b-c18b5b43e5f7",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Id not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(\"Id not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6f67a6d6-8570-44a7-8a5f-802cf76a0a39",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}/presenter/{{organizer_id}}"
							},
							"response": []
						},
						{
							"name": "delete organizerId_invalid event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b07c5ef0-ecb6-42cb-bd4b-c18b5b43e5f7",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Event not found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.eql(\"Event not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8fa3152d-93a1-497d-979d-faa09ca7617e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{url}}/api/v1/event/{{invalid_eventId}}/presenter/{{organizer_id}}"
							},
							"response": []
						},
						{
							"name": "delete organizerId_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b07c5ef0-ecb6-42cb-bd4b-c18b5b43e5f7",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"message: No token found in the request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "14b4b9e0-d4b0-4ac5-b645-2efbc07f89ca",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}/presenter/{{organizer_id}}"
							},
							"response": []
						},
						{
							"name": "delete organizerId_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b07c5ef0-ecb6-42cb-bd4b-c18b5b43e5f7",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"message: Invalid token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "59c5cb64-b6f7-41c4-b87b-502771d7d544",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}/presenter/{{organizer_id}}"
							},
							"response": []
						}
					],
					"id": "4313ba56-bb0d-419b-8c84-bf758e000646",
					"description": "#### Delete an organizer id from the event.\n\n#### [https://docs.introvoke.com/reference/deletehostbyid](https://docs.introvoke.com/reference/deletehostbyid)"
				},
				{
					"name": "get list of replays for event",
					"item": [
						{
							"name": "return replay list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64948abc-e69b-4588-a4c0-d2d21a94355d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//schema vaildation",
											"const ajv = require('ajv');",
											"const Ajv = ajv();",
											"pm.test(\"schema validation\", ()=>{",
											"    const schema = {",
											"        type: \"array\",",
											"        properties:{",
											"            ",
											"            \"creationDate\" :{\"type\":\"string\"},",
											"            \"isCustomReplay\":{\"type\":\"boolean\"},",
											"            \"url\":{\"type\":\"string\"}",
											"                     ",
											"    }",
											"    }",
											"",
											"    const validate = Ajv.compile(schema);",
											"    const res = pm.response.json();",
											"    const isValid = validate(res);",
											"    pm.expect(isValid).to.be.true;",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d8b15799-74fe-46d9-871c-816f10c74fc5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/event/{{replay_eventId}}/availableReplays"
							},
							"response": []
						},
						{
							"name": "return replay list_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64948abc-e69b-4588-a4c0-d2d21a94355d",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7042f2bc-43e1-4ce2-b653-5167c41cce25",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/event/{{replay_eventId}}/availableReplays"
							},
							"response": []
						},
						{
							"name": "return replay list_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64948abc-e69b-4588-a4c0-d2d21a94355d",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b4f3b3e8-206a-40b9-a81d-aa23a81ca15d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/event/{{replay_eventId}}/availableReplays"
							},
							"response": []
						},
						{
							"name": "return replay list_invalid eventId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64948abc-e69b-4588-a4c0-d2d21a94355d",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"hasError: true\", function () {",
											"    pm.expect(jsonData.hasError).to.eql(true);",
											"});",
											"",
											"pm.environment.set('errorMessage', pm.response.json().errorMessage);",
											"",
											"pm.test(\"errorMessage\", function () {",
											"pm.expect(jsonData.errorMessage).to.eql(pm.environment.get(\"errorMessage\"));",
											"});",
											"pm.environment.unset(\"errorMessage\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b1093db8-2e81-4e09-8fd2-302155c8314f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/event/{{invalid_eventId}}/availableReplays"
							},
							"response": []
						}
					],
					"id": "23eba52c-4ea8-4ec4-ab15-ba9b110c0bf6",
					"description": "#### Return a list of replays for this event. (Returns an array of replays for this event.)\n\n#### [https://docs.introvoke.com/reference/get_event-eventid-availablereplays](https://docs.introvoke.com/reference/get_event-eventid-availablereplays)"
				},
				{
					"name": "update event",
					"item": [
						{
							"name": "update event with json data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e22d9fbc-a1fb-401f-9c07-76b1733911c4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"//schema vaildation",
											"const ajv = require('ajv');",
											"const Ajv = ajv();",
											"pm.test(\"schema validation\", ()=>{",
											"    const schema = {",
											"        type: \"object\",",
											"        properties:{",
											"            \"uid\":{\"type\":\"string\"},",
											"            \"companyUid\":{\"type\":\"string\"},",
											"            \"name\":{\"type\":\"string\"},",
											"            \"startDate\":{\"type\":\"string\"},",
											"            \"endDate\":{\"type\":\"string\"},",
											"            \"timezone\":{\"type\":\"string\"},",
											"            \"type\":{\"type\":\"string\"},",
											"            \"eventInfo\":{\"type\":\"object\",",
											"                properties:{",
											"                    \"privateEventInfo\":{\"type\": \"object\",",
											"                    properties:{",
											"                        \"attendeePasscode\": {\"type\":\"string\"},",
											"                        \"presenterPasscode\": {\"type\":\"string\"},",
											"                        \"hostPasscode\": {\"type\":\"string\"},",
											"                        \"rtmpKey\": {\"type\":\"string\"},",
											"                        \"rtmpUrl\": {\"type\":\"string\"}",
											"",
											"                    }",
											"                }",
											"            },",
											"            ",
											"        }",
											"    }",
											"    }",
											"",
											"    const validate = Ajv.compile(schema);",
											"    const res = pm.response.json();",
											"    const isValid = validate(res);",
											"    pm.expect(isValid).to.be.true;",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "47690c2b-f6ba-4585-9c26-3fadf2b70c81",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\",\n    \"startDate\": \"\",\n    \"endDate\": \"\",\n    \"timezone\": \"\",\n    \"type\": \"\",\n    \"picture\": \"\",\n    \"networkingHub\": \"\",\n    \"presenters\": \"\",\n    \"organizers\": \"\",\n    \"autoSelectLatestReplay\": \"\",\n    \"disableEventRecording\": \"\",\n    \"isRegistrationModeEnabled\": \"\",\n    \"isAttendeeRegistrationModeEnabled\": \"\"\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}"
							},
							"response": []
						},
						{
							"name": "update event with json data_invalid eventId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e22d9fbc-a1fb-401f-9c07-76b1733911c4",
										"exec": [
											"",
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"hasError: true\", function () {",
											"pm.expect(jsonData.hasError).to.eql(true);",
											"});",
											"",
											"pm.environment.set('errorMessage', pm.response.json().errorMessage);",
											"",
											"pm.test(\"errorMessage\", function () {",
											"pm.expect(jsonData.errorMessage).to.eql(pm.environment.get(\"errorMessage\"));",
											"});",
											"pm.environment.unset(\"errorMessage\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2bafe520-d26a-4019-a113-aff0e511fe03",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\",\n    \"startDate\": \"\",\n    \"endDate\": \"\",\n    \"timezone\": \"\",\n    \"type\": \"\",\n    \"picture\": \"\",\n    \"networkingHub\": \"\",\n    \"presenters\": \"\",\n    \"organizers\": \"\",\n    \"autoSelectLatestReplay\": \"\",\n    \"disableEventRecording\": \"\",\n    \"isRegistrationModeEnabled\": \"\",\n    \"isAttendeeRegistrationModeEnabled\": \"\"\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{invalid_eventId}}"
							},
							"response": []
						},
						{
							"name": "update event with json data_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e22d9fbc-a1fb-401f-9c07-76b1733911c4",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "94af40a1-1c55-4ce5-a76c-270e85504a82",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\",\n    \"startDate\": \"\",\n    \"endDate\": \"\",\n    \"timezone\": \"\",\n    \"type\": \"\",\n    \"picture\": \"\",\n    \"networkingHub\": \"\",\n    \"presenters\": \"\",\n    \"organizers\": \"\",\n    \"autoSelectLatestReplay\": \"\",\n    \"disableEventRecording\": \"\",\n    \"isRegistrationModeEnabled\": \"\",\n    \"isAttendeeRegistrationModeEnabled\": \"\"\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}"
							},
							"response": []
						},
						{
							"name": "update event with json data_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e22d9fbc-a1fb-401f-9c07-76b1733911c4",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "14abf840-9778-4d00-92f4-34d73cce7c49",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\",\n    \"startDate\": \"\",\n    \"endDate\": \"\",\n    \"timezone\": \"\",\n    \"type\": \"\",\n    \"picture\": \"\",\n    \"networkingHub\": \"\",\n    \"presenters\": \"\",\n    \"organizers\": \"\",\n    \"autoSelectLatestReplay\": \"\",\n    \"disableEventRecording\": \"\",\n    \"isRegistrationModeEnabled\": \"\",\n    \"isAttendeeRegistrationModeEnabled\": \"\"\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}"
							},
							"response": []
						}
					],
					"id": "b767d8ac-4185-45aa-863d-1435889a1445",
					"description": "#### Update an event with json data.\n\n#### [https://docs.introvoke.com/reference/updateeventwithjsondata](https://docs.introvoke.com/reference/updateeventwithjsondata)"
				},
				{
					"name": "clone event",
					"item": [
						{
							"name": "create clone event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5af30625-8fd0-46ad-af75-7b7308453e6a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set('clone_eventId', pm.response.json().uid);",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"companyUid\", function () {",
											"pm.expect(jsonData.companyUid).to.eql(pm.environment.get(\"companyId\"));",
											"});",
											"pm.test(\"name\", function () {",
											"pm.expect(jsonData.name).to.eql(\"Create clone event\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"//schema vaildation",
											"const ajv = require('ajv');",
											"const Ajv = ajv();",
											"pm.test(\"schema validation\", ()=>{",
											"    const schema = {",
											"        type: \"object\",",
											"        properties:{",
											"            \"uid\":{\"type\":\"string\"},",
											"            \"companyUid\":{\"type\":\"string\"},",
											"            \"name\":{\"type\":\"string\"},",
											"            \"startDate\":{\"type\":\"string\"},",
											"            \"endDate\":{\"type\":\"string\"},",
											"            \"timezone\":{\"type\":\"string\"},",
											"            \"type\":{\"type\":\"string\"},",
											"            \"eventInfo\":{\"type\":\"object\",",
											"                properties:{",
											"                    \"privateEventInfo\":{\"type\": \"object\",",
											"                    properties:{",
											"                        \"attendeePasscode\": {\"type\":\"string\"},",
											"                        \"presenterPasscode\": {\"type\":\"string\"},",
											"                        \"hostPasscode\": {\"type\":\"string\"},",
											"                        \"rtmpKey\": {\"type\":\"string\"},",
											"                        \"rtmpUrl\": {\"type\":\"string\"}",
											"",
											"                    }",
											"                }",
											"            },",
											"            ",
											"        }",
											"    }",
											"    }",
											"",
											"    const validate = Ajv.compile(schema);",
											"    const res = pm.response.json();",
											"    const isValid = validate(res);",
											"    pm.expect(isValid).to.be.true;",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b3db1fa6-45c3-4bb1-ade0-c75d59bdcd01",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Create clone event\",\n    \"startDate\": \"2022-12-15T00:00:00.000Z\",\n    \"endDate\": \"2023-12-15T00:00:00.000Z\",\n    \"timezone\": \"Europe/Lisbon\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/clone"
							},
							"response": []
						},
						{
							"name": "create clone event_invalid eventId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5af30625-8fd0-46ad-af75-7b7308453e6a",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "293958c0-f0e7-4c84-942d-370dd1664bcd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Create clone event\",\n    \"startDate\": \"2022-12-15T00:00:00.000Z\",\n    \"endDate\": \"2023-12-15T00:00:00.000Z\",\n    \"timezone\": \"Europe/Lisbon\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{invalid_eventId}}/clone"
							},
							"response": []
						},
						{
							"name": "create clone event_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5af30625-8fd0-46ad-af75-7b7308453e6a",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// let jsonData = pm.response.json();",
											"// pm.test(\"message: No token found in the request\", function () {",
											"//     pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8b47ced3-e3e1-4498-a0a9-7c09df0ed354",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Create clone event\",\n    \"startDate\": \"2022-12-15T00:00:00.000Z\",\n    \"endDate\": \"2023-12-15T00:00:00.000Z\",\n    \"timezone\": \"Europe/Lisbon\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/clone"
							},
							"response": []
						},
						{
							"name": "create clone event_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5af30625-8fd0-46ad-af75-7b7308453e6a",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// let jsonData = pm.response.json();",
											"// pm.test(\"message: Invalid token\", function () {",
											"//     pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "acdb8ed2-c2f6-46d6-8ccd-0fa460874648",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Create clone event\",\n    \"startDate\": \"2022-12-15T00:00:00.000Z\",\n    \"endDate\": \"2023-12-15T00:00:00.000Z\",\n    \"timezone\": \"Europe/Lisbon\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/clone"
							},
							"response": []
						},
						{
							"name": "delete clone event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b7228de-5bda-40e5-b203-c14d38e1aca6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ef8ee86e-b9d1-4f20-9b4f-88b7cddb4f04",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{url}}/api/v1/event/{{clone_eventId}}"
							},
							"response": []
						}
					],
					"id": "a39e378e-0738-4263-b1ea-19169899a2f7",
					"description": "#### Create a new event based on source event\n\n#### [https://docs.introvoke.com/reference/cloneevent](https://docs.introvoke.com/reference/cloneevent)"
				},
				{
					"name": "delete registered user",
					"item": [
						{
							"name": "delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0200f20d-1b80-4244-902b-88d70fc7763a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"Deleted OK\", function () {",
											"pm.expect(jsonData).to.eql(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "19438b3a-45ff-4005-a6ff-b0bcf62fd651",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"{{user_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/registrant"
							},
							"response": []
						},
						{
							"name": "delete user_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0200f20d-1b80-4244-902b-88d70fc7763a",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6c0c1168-3051-4c62-987e-944952529159",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"{{user_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/registrant"
							},
							"response": []
						},
						{
							"name": "delete user_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0200f20d-1b80-4244-902b-88d70fc7763a",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7b81291e-20ad-401a-bfc9-f0034d788fdd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"{{user_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/registrant"
							},
							"response": []
						},
						{
							"name": "delete user_invalid eventId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0200f20d-1b80-4244-902b-88d70fc7763a",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.environment.set('errorMessage', pm.response.json().errorMessage);",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"hasError: true\", function () {",
											"pm.expect(jsonData.hasError).to.eql(true);",
											"});",
											"pm.test(\"errorMessage\", function () {",
											"pm.expect(jsonData.errorMessage).to.eql(pm.environment.get(\"errorMessage\"));",
											"});",
											"pm.environment.unset(\"errorMessage\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "58427008-f722-431d-ba52-4ad7e9d1108f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"{{user_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{invalid_eventId}}/registrant"
							},
							"response": []
						},
						{
							"name": "delete user_invalid email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0200f20d-1b80-4244-902b-88d70fc7763a",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"Registrant not found\", function () {",
											"pm.expect(jsonData).to.eql(\"Registrant not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0422a057-789d-4ab4-a099-0cd34e809bae",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\":\"abc12345T8*!oQ9@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/registrant"
							},
							"response": []
						},
						{
							"name": "delete user_invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0200f20d-1b80-4244-902b-88d70fc7763a",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"Invalid parameters supplied\", function () {",
											"pm.expect(jsonData).to.eql(\"Invalid parameters supplied\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1de66819-30da-4fa7-8758-e6357f572786",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"{{user_name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/event/{{eventId}}/registrant"
							},
							"response": []
						},
						{
							"name": "find deleted users list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a25235b-5051-4ed1-be2e-6b05c2d5bc6f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"Blank list\", function () {",
											"pm.expect(jsonData).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7d9bf929-d179-41e4-81ea-6be14974650f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}/registrants"
							},
							"response": []
						}
					],
					"id": "ad134dd7-2901-44b3-b0d8-d7653adfc372",
					"description": "#### Delete a registered user from the event\n\n#### [https://docs.introvoke.com/reference/deleteregistrantbyid](https://docs.introvoke.com/reference/deleteregistrantbyid)"
				},
				{
					"name": "delete event",
					"item": [
						{
							"name": "delete event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b7228de-5bda-40e5-b203-c14d38e1aca6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c7dd5783-fdde-47fe-889b-7a433034a159",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}"
							},
							"response": []
						},
						{
							"name": "delete same event twice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b7228de-5bda-40e5-b203-c14d38e1aca6",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"hasError: true\", function () {",
											"pm.expect(jsonData.hasError).to.eql(true);",
											"});",
											"",
											"pm.environment.set('errorMessage', pm.response.json().errorMessage);",
											"",
											"pm.test(\"errorMessage\", function () {",
											"pm.expect(jsonData.errorMessage).to.eql(pm.environment.get(\"errorMessage\"));",
											"});",
											"pm.environment.unset(\"errorMessage\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "961c7260-6772-47cc-993a-689f51fc32b0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}"
							},
							"response": []
						},
						{
							"name": "delete event_invalid event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b7228de-5bda-40e5-b203-c14d38e1aca6",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"hasError: true\", function () {",
											"pm.expect(jsonData.hasError).to.eql(true);",
											"});",
											"",
											"",
											"pm.environment.set('errorMessage', pm.response.json().errorMessage);",
											"",
											"pm.test(\"errorMessage\", function () {",
											"pm.expect(jsonData.errorMessage).to.eql(pm.environment.get(\"errorMessage\"));",
											"});",
											"pm.environment.unset(\"errorMessage\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2cdfa9bd-0b02-41c6-9c82-22dd2c62f861",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{url}}/api/v1/event/{{invalid_eventId}}"
							},
							"response": []
						},
						{
							"name": "delete event_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b7228de-5bda-40e5-b203-c14d38e1aca6",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8ea1c02d-8bd2-437e-a8de-0043ecf35263",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}"
							},
							"response": []
						},
						{
							"name": "delete event_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b7228de-5bda-40e5-b203-c14d38e1aca6",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1e37d4dc-d5de-4a50-9b59-aba8dfa172d1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{url}}/api/v1/event/{{eventId}}"
							},
							"response": []
						}
					],
					"id": "b45a2930-24d8-42b3-a197-2118dfa7c4dd",
					"description": "#### Delete an event\n\n#### [https://docs.introvoke.com/reference/deleteevent](https://docs.introvoke.com/reference/deleteevent)"
				}
			],
			"id": "57bee037-9819-4568-a251-9b11a88c190c"
		},
		{
			"name": "networking",
			"item": [
				{
					"name": "create networking hub",
					"item": [
						{
							"name": "create networking hub",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2e42742-5db2-4138-b6d6-c7fcff0872d3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"friendlyName\", function () {",
											"pm.expect(jsonData.friendlyName).to.eql(\"Test Networking Hub\");",
											"});",
											"pm.test(\"company\", function () {",
											"pm.expect(jsonData.company).to.eql(pm.environment.get(\"companyId\"));",
											"});",
											"/*pm.test(\"organizers\", function () {",
											"pm.expect(jsonData.organizers).to.eql(pm.environment.get(\"user_email\"));",
											"}); */",
											"pm.test(\"networkingHubRooms name\", function () {",
											"pm.expect(jsonData.networkingHubRooms[0].name).to.eql(\"Food Lovers\");",
											"});",
											"pm.test(\"networkingHubRooms maxSlots\", function () {",
											"pm.expect(jsonData.networkingHubRooms[0].maxSlots).to.eql(4);",
											"});",
											"",
											"pm.test(\"whitelabel\", function () {",
											"pm.expect(jsonData.whitelabel.hasLiveSupport).to.eql(true);",
											"});",
											"",
											"pm.environment.set('networkingHub_id', pm.response.json().uid);",
											"",
											"pm.test(\"uid\", function () {",
											"pm.expect(jsonData.uid).to.eql(pm.environment.get(\"networkingHub_id\"));",
											"});",
											"",
											"",
											"//schema vaildation",
											"const ajv = require('ajv');",
											"const Ajv = ajv();",
											"pm.test(\"schema validation\", ()=>{",
											"    const schema = {",
											"        type: \"object\",",
											"        properties:{",
											"            \"friendlyName\":{\"type\":\"string\"},",
											"            \"company\":{\"type\":\"string\"},",
											"            \"organizers\":{\"type\":\"array\"},",
											"            \"networkingHubRooms\":{\"type\":\"array\",",
											"              properties:{",
											"                  \"name\":{\"type\": \"string\"},",
											"                  \"maxSlots\":{\"type\": \"integer\"},",
											"                  \"id\":{\"type\": \"string\"}",
											"              },",
											"            },",
											"            \"whitelabel\":{\"type\":\"object\",",
											"                properties:{",
											"                    \"hasLiveSupport\":{\"type\": \"boolean\"},     ",
											"                            },",
											"            \"uid\":{\"type\":\"string\"},",
											"        }",
											"        ",
											"    }",
											"    }",
											"",
											"    const validate = Ajv.compile(schema);",
											"    const res = pm.response.json();",
											"    const isValid = validate(res);",
											"    pm.expect(isValid).to.be.true;",
											"})",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ea8d7875-7840-4892-97bd-e5c5f8ba8f82",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"friendlyName\": \"Test Networking Hub\",\n    \"company\": \"{{companyId}}\",\n    \"organizers\": [\"abc@gmail.com\"],\n    \"networkingHubRooms\": [\n                            {   \n                                \"name\": \"Food Lovers\",\n                                \"maxSlots\": 4\n                             }\n                        ]\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking"
							},
							"response": []
						},
						{
							"name": "create networking hub_blank networkinghub room",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2e42742-5db2-4138-b6d6-c7fcff0872d3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cd40f45d-0a41-4608-af8c-f1af0303360a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"friendlyName\": \"Test Networking Hub\",\n    \"company\": \"{{companyId}}\",\n    \"organizers\": [\"abc@gmail.com\"],\n    \"networkingHubRooms\": [\n                            \n                        ]\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking"
							},
							"response": []
						},
						{
							"name": "create networking hub_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2e42742-5db2-4138-b6d6-c7fcff0872d3",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// let jsonData = pm.response.json();",
											"// pm.test(\"message: No token found in the request\", function () {",
											"//     pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e4c2521d-0c17-480c-9e6c-e872c065d70e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"friendlyName\": \"Test Networking Hub\",\n    \"company\": \"{{companyId}}\",\n    \"organizers\": \"abc@gmail.com\",\n    \"networkingHubRooms\": \"abc\",\n    \"whitelabel\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking"
							},
							"response": []
						},
						{
							"name": "create networking hub_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2e42742-5db2-4138-b6d6-c7fcff0872d3",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f5c5e9fd-5ff1-4a57-b1e0-f41af3bb8985",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"friendlyName\": \"Test Networking Hub\",\n    \"company\": \"{{companyId}}\",\n    \"organizers\": \"abc@gmail.com\",\n    \"networkingHubRooms\": \"abc\",\n    \"whitelabel\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking"
							},
							"response": []
						},
						{
							"name": "create networking hub_invalid companyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2e42742-5db2-4138-b6d6-c7fcff0872d3",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d8f66fad-008d-4c84-bdfd-9578cec68933",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"friendlyName\": \"Test Networking Hub\",\n    \"company\": \"{{invalid_companyId}}\",\n    \"organizers\": \"abc@gmail.com\",\n    \"networkingHubRooms\": \"abc\",\n    \"whitelabel\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking"
							},
							"response": []
						}
					],
					"id": "8fc63cf6-bef6-4301-93cb-6e52e8346ce4",
					"description": "#### Create a new networking hub\n\n#### [https://docs.introvoke.com/reference/addnetworkinghub](https://docs.introvoke.com/reference/addnetworkinghub)"
				},
				{
					"name": "find networking hub by id",
					"item": [
						{
							"name": "find networkingHub",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12e71169-4cd1-4119-a1ff-de986e87bc43",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//schema vaildation",
											"const ajv = require('ajv');",
											"const Ajv = ajv();",
											"pm.test(\"schema validation\", ()=>{",
											"    const schema = {",
											"        type: \"object\",",
											"        properties:{",
											"            \"friendlyName\":{\"type\":\"string\"},",
											"            \"networkingHubRooms\":{\"type\":\"array\",",
											"              properties:{",
											"                  \"name\":{\"type\": \"string\"},",
											"                  \"maxSlots\":{\"type\": \"integer\"},",
											"                  \"id\":{\"type\": \"string\"},",
											"              },},",
											"            \"organizers\":{\"type\":\"array\"},",
											"            \"hosts\":{\"type\":\"array\"},",
											"            \"uid\":{\"type\":\"string\"},",
											"            \"company\":{\"type\":\"string\"},",
											"            \"whitelabel\":{\"type\":\"object\",",
											"                properties:{",
											"                  \"hasLiveSupport\":{\"type\": \"boolean\"},",
											"                  \"showPoweredBy\":{\"type\": \"boolean\"},",
											"            },},",
											"        ",
											"        ",
											"    }",
											"    }",
											"",
											"    const validate = Ajv.compile(schema);",
											"    const res = pm.response.json();",
											"    const isValid = validate(res);",
											"    pm.expect(isValid).to.be.true;",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "002745a2-b050-4f4d-934d-3cd6f1c215fe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}"
							},
							"response": []
						},
						{
							"name": "find networkingHub_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12e71169-4cd1-4119-a1ff-de986e87bc43",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a5afa21b-7436-4f2e-ac4a-93ffc917e62b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}"
							},
							"response": []
						},
						{
							"name": "find networkingHub_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12e71169-4cd1-4119-a1ff-de986e87bc43",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0d741311-4bb6-49d4-87ea-f239186acec7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}"
							},
							"response": []
						},
						{
							"name": "find networkingHub_invalid networkingHub id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12e71169-4cd1-4119-a1ff-de986e87bc43",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"hasError: true\", function () {",
											"    pm.expect(jsonData.hasError).to.eql(true);",
											"});",
											"pm.test(\"errorMessage: Entity not found\", function () {",
											"    pm.expect(jsonData.errorMessage).to.eql(\"Entity not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a77720c4-f490-48bc-85c3-c2a36cfa4f68",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{invalid_networkingHubId}}"
							},
							"response": []
						}
					],
					"id": "ad7415bb-2048-4a30-8ee7-fc11290844c1",
					"description": "#### Find NetworkingHub by ID\n\n#### [https://docs.introvoke.com/reference/getnetworkinghubbyid](https://docs.introvoke.com/reference/getnetworkinghubbyid)"
				},
				{
					"name": "register user for networking hub",
					"item": [
						{
							"name": "register user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16c02b25-8a32-42e9-b5b7-37fc3c276a99",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//schema validation",
											"const ajv = require('ajv');",
											"const Ajv = ajv();",
											"pm.test(\"schema validation\", ()=>{",
											"    const schema = {",
											"        type: \"object\",",
											"        properties:{",
											"            \"join_url\":{\"type\":\"string\"},",
											"            \"joinCode\":{\"type\":\"string\"},",
											"            \"authToken\":{\"type\":\"string\"},",
											"            \"email\":{\"type\":\"string\"}",
											"            ",
											"        }",
											"    }",
											"",
											"    const validate = Ajv.compile(schema);",
											"    const res = pm.response.json();",
											"    const isValid = validate(res);",
											"    pm.expect(isValid).to.be.true;",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f807c8db-fc77-47c5-87bc-dfb5e7cb7cfe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test user\",\n    \"email\": \"test_user@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/registrant"
							},
							"response": []
						},
						{
							"name": "register user_with same email again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16c02b25-8a32-42e9-b5b7-37fc3c276a99",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "dbe07e8d-0d56-4246-a135-0c2a3e5fb67a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test user\",\n    \"email\": \"test_user@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/registrant"
							},
							"response": []
						},
						{
							"name": "register user_invalid networkingHub id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16c02b25-8a32-42e9-b5b7-37fc3c276a99",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"hasError: true\", function () {",
											"    pm.expect(jsonData.hasError).to.eql(true);",
											"});",
											"pm.test(\"errorMessage: Networking hub not found\", function () {",
											"    pm.expect(jsonData.errorMessage).to.eql(\"Networking hub not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "06336b92-6fb3-4770-9e47-660ee6458056",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test user\",\n    \"email\": \"test_user@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{invalid_networkingHubId}}/registrant"
							},
							"response": []
						},
						{
							"name": "register user_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16c02b25-8a32-42e9-b5b7-37fc3c276a99",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "750b4b2a-a37e-4758-8c7d-f005905cb9bb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test user\",\n    \"email\": \"test_user@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{invalid_networkingHubId}}/registrant"
							},
							"response": []
						},
						{
							"name": "register user_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16c02b25-8a32-42e9-b5b7-37fc3c276a99",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b97ade15-0584-4f1a-a3d5-eeadeb6dcdb6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test user\",\n    \"email\": \"test_user@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{invalid_networkingHubId}}/registrant"
							},
							"response": []
						}
					],
					"id": "0464da74-c66b-49c1-a03f-895ff1a9b105",
					"description": "#### Register a user for the networking hub\n\n#### [https://docs.introvoke.com/reference/post_networking-id-registrant](https://docs.introvoke.com/reference/post_networking-id-registrant)"
				},
				{
					"name": "return participants list",
					"item": [
						{
							"name": "return list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afe12068-e34b-4540-b440-cac0e8f55dd2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4f252848-f416-4c02-80c9-c911112dfcd4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/participantsList"
							},
							"response": []
						},
						{
							"name": "return list_invalid networkingHub id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afe12068-e34b-4540-b440-cac0e8f55dd2",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9107220b-f65a-4a96-9e51-accdd490e246",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{invalid_networkingHubId}}/participantsList"
							},
							"response": []
						},
						{
							"name": "return list_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afe12068-e34b-4540-b440-cac0e8f55dd2",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8f884a66-6182-4df1-b291-17f6690bb93b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/participantsList"
							},
							"response": []
						},
						{
							"name": "return list_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afe12068-e34b-4540-b440-cac0e8f55dd2",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0a5a7a88-cc74-47e1-8338-658ececf464d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/participantsList"
							},
							"response": []
						}
					],
					"id": "fca68160-e4ed-419e-8530-b07a68ecbc5d",
					"description": "#### Return a list of participants\n\n#### [https://docs.introvoke.com/reference/returnnetworkinghubparticipants](https://docs.introvoke.com/reference/returnnetworkinghubparticipants)"
				},
				{
					"name": "clear networking hub chat channels",
					"item": [
						{
							"name": "clear chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5491c4df-f905-47ce-973f-49b68f94fcce",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d353954c-6298-477a-a4c5-5d0393fc1110",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/clearChat"
							},
							"response": []
						},
						{
							"name": "clear chat_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5491c4df-f905-47ce-973f-49b68f94fcce",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ac6cbf69-3f14-4fc2-b4e5-c473e125cc18",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/clearChat"
							},
							"response": []
						},
						{
							"name": "clear chat_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5491c4df-f905-47ce-973f-49b68f94fcce",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "182d8923-f5ba-4531-8bea-dec49d7d47c1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/clearChat"
							},
							"response": []
						},
						{
							"name": "clear chat_invalid networkingHub id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5491c4df-f905-47ce-973f-49b68f94fcce",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"hasError: true\", function () {",
											"    pm.expect(jsonData.hasError).to.eql(true);",
											"});",
											"pm.test(\"errorMessage: Networking hub not found\", function () {",
											"    pm.expect(jsonData.errorMessage).to.eql(\"Networking hub not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3fa33531-db48-4452-bcb9-6bbe2f8ff02c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{invalid_networkingHubId}}/clearChat"
							},
							"response": []
						}
					],
					"id": "ea25836b-fdcb-4231-aa09-a84cd7ff522f",
					"description": "#### Clear all networking hub chat channels with the option to clear individual circles\n\n#### [https://docs.introvoke.com/reference/postclearchat](https://docs.introvoke.com/reference/postclearchat)"
				},
				{
					"name": "set user profile",
					"item": [
						{
							"name": "set user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af96970e-211c-47a2-aa79-6c5b87f5735a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3974dcd0-f340-432f-8e5f-d6096b4e9b6d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"\",\n    \"userProfile\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/setUserProfile"
							},
							"response": []
						},
						{
							"name": "set user profile_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af96970e-211c-47a2-aa79-6c5b87f5735a",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5cc22eb0-6203-4254-80cf-c6630a6a47af",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/setUserProfile"
							},
							"response": []
						},
						{
							"name": "set user profile_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af96970e-211c-47a2-aa79-6c5b87f5735a",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d8a2b5a4-a887-4511-8f20-89f6f56e6bc3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/setUserProfile"
							},
							"response": []
						},
						{
							"name": "set user profile_invalid networkingHub id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af96970e-211c-47a2-aa79-6c5b87f5735a",
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"Id not found\", function () {",
											"    pm.expect(jsonData).to.eql(\"Id not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c1996b62-bd79-483f-8672-873f4e3ed7b3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{invalid_networkingHubId}}/setUserProfile"
							},
							"response": []
						}
					],
					"id": "d271875e-0d6c-4be9-a689-c05161de199e",
					"description": "#### Set a user profile\n\n#### [https://docs.introvoke.com/reference/setuserprofile](https://docs.introvoke.com/reference/setuserprofile)"
				},
				{
					"name": "invite another user to join conversation",
					"item": [
						{
							"name": "invite user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acde6971-4b25-423c-a1db-b3938401804f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7f5ab690-3ed5-4ffe-8a12-7403a2e1bef9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"test1@gmail.com\",\n    \"invitedUserId\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/inviteUser"
							},
							"response": []
						},
						{
							"name": "invite user_invalid networkingHub id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acde6971-4b25-423c-a1db-b3938401804f",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"Id not found\", function () {",
											"    pm.expect(jsonData).to.eql(\"Id not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a14bd249-2007-49b0-9271-1dee2c253536",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"test1@gmail.com\",\n    \"invitedUserId\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{invalid_networkingHubId}}/inviteUser"
							},
							"response": []
						},
						{
							"name": "invite user_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acde6971-4b25-423c-a1db-b3938401804f",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fb0a3602-f72a-43e3-a92d-0c7047b4a281",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"test1@gmail.com\",\n    \"invitedUserId\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{invalid_networkingHubId}}/inviteUser"
							},
							"response": []
						},
						{
							"name": "invite user_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acde6971-4b25-423c-a1db-b3938401804f",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a0670391-8d23-471b-ba4a-cd28d47e32c0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"test1@gmail.com\",\n    \"invitedUserId\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{invalid_networkingHubId}}/inviteUser"
							},
							"response": []
						}
					],
					"id": "8a023e3d-213a-4d9b-b77d-7c9a901d56dc",
					"description": "#### Invite another user to join a conversation\n\n#### [https://docs.introvoke.com/reference/inviteuser](https://docs.introvoke.com/reference/inviteuser)"
				},
				{
					"name": "return embed code for networking hub",
					"item": [
						{
							"name": "return embed code",
							"id": "ec503160-b3bc-434a-b9c9-78e56d6a9a12",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"test\",\n    \"userDisplayName\": \"test\",\n    \"userEmail\": \"test2@gmail.com\",\n    \"userAvatar\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/embedCode"
							},
							"response": []
						},
						{
							"name": "return embed code_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dfd533be-983d-4c89-a8bd-d6fbebb01a5b",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6fa3ba2d-4080-4081-9654-500a4379ee35",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"test\",\n    \"userDisplayName\": \"test\",\n    \"userEmail\": \"test2@gmail.com\",\n    \"userAvatar\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/embedCode"
							},
							"response": []
						},
						{
							"name": "return embed code_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dfd533be-983d-4c89-a8bd-d6fbebb01a5b",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e9466940-0fd4-4723-b87c-632f1123f6e7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"test\",\n    \"userDisplayName\": \"test\",\n    \"userEmail\": \"test2@gmail.com\",\n    \"userAvatar\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/embedCode"
							},
							"response": []
						},
						{
							"name": "return embed code_invalid networkingHub id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "556c7c7f-7325-4a16-91da-fd6c9b008db2",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"Id not found\", function () {",
											"    pm.expect(jsonData).to.eql(\"Id not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d7612bec-7676-4ffb-92a0-d8883e1d9f0b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"test\",\n    \"userDisplayName\": \"test\",\n    \"userEmail\": \"test2@gmail.com\",\n    \"userAvatar\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{invalid_networkingHubId}}/embedCode"
							},
							"response": []
						}
					],
					"id": "d528a5ca-9cf1-4bb1-a487-a2e4871ea55a",
					"description": "#### Return the embed code for the Networking hub component\n\n#### [https://docs.introvoke.com/reference/getembednetworkinghubbyid](https://docs.introvoke.com/reference/getembednetworkinghubbyid)"
				},
				{
					"name": "update networking hub with json data",
					"item": [
						{
							"name": "update networking hub",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a70e3312-58fe-4d2b-a97f-a4a6d13897c9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3d312599-1e82-4f01-831e-46b4e2b1c830",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"uid\": \"\",\n    \"friendlyName\": \"\",\n    \"company\": \"\",\n    \"organizers\": \"\",\n    \"networkingHubRooms\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}"
							},
							"response": []
						},
						{
							"name": "update networking hub_invalid networkingHub id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a70e3312-58fe-4d2b-a97f-a4a6d13897c9",
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"Id not found\", function () {",
											"    pm.expect(jsonData).to.eql(\"Id not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5a222e93-0558-44d6-86e6-433d35bb3fec",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"uid\": \"\",\n    \"friendlyName\": \"\",\n    \"company\": \"\",\n    \"organizers\": \"\",\n    \"networkingHubRooms\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{invalid_networkingHubId}}"
							},
							"response": []
						},
						{
							"name": "update networking hub_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a70e3312-58fe-4d2b-a97f-a4a6d13897c9",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2959b48b-658b-4424-b406-0d13ebe6082e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"uid\": \"\",\n    \"friendlyName\": \"\",\n    \"company\": \"\",\n    \"organizers\": \"\",\n    \"networkingHubRooms\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{invalid_networkingHubId}}"
							},
							"response": []
						},
						{
							"name": "update networking hub_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a70e3312-58fe-4d2b-a97f-a4a6d13897c9",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b3ce9dae-4a4c-4bc1-a9cf-bcdf3eb368a7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"uid\": \"\",\n    \"friendlyName\": \"\",\n    \"company\": \"\",\n    \"organizers\": \"\",\n    \"networkingHubRooms\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{invalid_networkingHubId}}"
							},
							"response": []
						}
					],
					"id": "55e3fed0-c8dd-467a-835d-146e814c6844",
					"description": "#### Update a NetworkingHub hub with json data\n\n#### [https://docs.introvoke.com/reference/updatenetworkinghub](https://docs.introvoke.com/reference/updatenetworkinghub)"
				},
				{
					"name": "retrieve downloaded URL for the mp4 recording",
					"item": [
						{
							"name": "get download URL for recording",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "461dfaa4-377c-457e-9095-76c6c576eae0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"//schema validation",
											"const ajv = require('ajv');",
											"const Ajv = ajv();",
											"pm.test(\"schema validation\", ()=>{",
											"    const schema = {",
											"        type: \"object\",",
											"        properties:{",
											"            \"downloadUrl\":{\"type\":\"string\"},",
											"            \"expiresOn\":{\"type\":\"string\"}",
											"            ",
											"        }",
											"    }",
											"",
											"    const validate = Ajv.compile(schema);",
											"    const res = pm.response.json();",
											"    const isValid = validate(res);",
											"    pm.expect(isValid).to.be.true;",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "96314495-8c50-4dbe-b9ec-5b06920df714",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{networkingId_circle_recording}}/circle/{{circleId}}/recording/{{recordingId}}"
							},
							"response": []
						},
						{
							"name": "get download URL for recording_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "461dfaa4-377c-457e-9095-76c6c576eae0",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b1f5aa30-61e8-4804-8055-c88c323a430b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{networkingId_circle_recording}}/circle/{{circleId}}/recording/{{recordingId}}"
							},
							"response": []
						},
						{
							"name": "get download URL for recording_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "461dfaa4-377c-457e-9095-76c6c576eae0",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c67543af-1edb-4af4-bca9-4e7fdb35aed3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{networkingId_circle_recording}}/circle/{{circleId}}/recording/{{recordingId}}"
							},
							"response": []
						},
						{
							"name": "get download URL for recording_invalid recordingId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "461dfaa4-377c-457e-9095-76c6c576eae0",
										"exec": [
											"pm.test(\"Status code is 400 Bad request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4148b15d-f7e7-4dad-940b-ca443418a38e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{networkingId_circle_recording}}/circle/{{circleId}}/recording/{{invalid_recordingId}}"
							},
							"response": []
						},
						{
							"name": "get download URL for recording_invalid circleId Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "461dfaa4-377c-457e-9095-76c6c576eae0",
										"exec": [
											"pm.test(\"Status code is 400 Bad request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "459f2fc5-fcd5-4da2-85cb-a37b052877f1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/api/v1/networking/{{networkingId_circle_recording}}/circle/{{invalid_circleId}}/recording/{{recordingId}}"
							},
							"response": []
						}
					],
					"id": "0af6bb2a-2395-4087-8bec-265d535e1692",
					"description": "#### Retrieves the download URL for the MP4 recording for the specified circle id and recording id. (Returns the download URL for the recording and expiration date/time for the URL.)\n\n#### [https://docs.introvoke.com/reference/getnetworkinghubcirclerecordingdownloadurl](https://docs.introvoke.com/reference/getnetworkinghubcirclerecordingdownloadurl)"
				},
				{
					"name": "delete registered user from networking hub",
					"item": [
						{
							"name": "delete user from networking hub",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54e77479-4f96-4882-9f3d-c69ca442e984",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a6f237c1-3842-4301-96aa-69c125849d45",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"test_user@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/registrant"
							},
							"response": []
						},
						{
							"name": "delete user_without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54e77479-4f96-4882-9f3d-c69ca442e984",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"/* let jsonData = pm.response.json();",
											"pm.test(\"message: No token found in the request\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"No token found in the request\");",
											"}); */"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "66529ae3-43ed-499f-b925-c9744e78388c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"test_user@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/registrant"
							},
							"response": []
						},
						{
							"name": "delete user_wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54e77479-4f96-4882-9f3d-c69ca442e984",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"/* let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"}); */"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7db62bc1-44f7-43c7-a9f3-e49bb3ecead6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{wrong_token}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"test_user@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/registrant"
							},
							"response": []
						},
						{
							"name": "delete user_invalid networkingHub Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54e77479-4f96-4882-9f3d-c69ca442e984",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"/* let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"}); */"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3f686686-2cc1-4ea5-82d8-2a86aa3f0041",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"test_user@gmail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{invalid_networkingHubId}}/registrant"
							},
							"response": []
						},
						{
							"name": "delete user_invalid registrant email Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54e77479-4f96-4882-9f3d-c69ca442e984",
										"exec": [
											"pm.test(\"Status code is 401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"/* let jsonData = pm.response.json();",
											"pm.test(\"message: Invalid token\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Invalid token\");",
											"}); */"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "04f9b30e-fecb-4504-8bc5-5a26388fabc7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"kbadc67@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/api/v1/networking/{{networkingHub_id}}/registrant"
							},
							"response": []
						}
					],
					"id": "69627b19-b85f-47f8-87d0-5a9a844a7829",
					"description": "#### Delete a registered user from the networking hub\n\n#### [https://docs.introvoke.com/reference/deletehubregistrantbyid](https://docs.introvoke.com/reference/deletehubregistrantbyid)"
				}
			],
			"id": "8ae9b829-97ab-4da1-95fb-bc242232e8a0"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{jwt_access_token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6b9e9bd1-a972-4213-a909-e4bd97bd7cf0",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "6c9a477c-d90b-4b45-ae63-bc84c8149801",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "8403237a-2800-4103-8c2e-5499553b1a65",
			"key": "access_token",
			"value": ""
		}
	]
}